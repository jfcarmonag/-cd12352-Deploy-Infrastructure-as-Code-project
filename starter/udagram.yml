Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:
  EnvironmentName: 
    Description: An environment name that will be prefixed to resources
    Type: String
  S3BucketName:
    Description: The name of the S3 bucket where the static website files are stored
    Type: String

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: InstanceRole

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to our hosts and http to our local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress: 

        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  LBSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Allow http traffic to our load balancer
        SecurityGroupEgress: 
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupIngress: 
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        VpcId: 
          Fn::ImportValue :
            !Sub "${EnvironmentName}-VPCID"



  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
  
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-PRIV-NETS"
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref WebAppLaunchTemplate
            Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
        InstancesDistribution:
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 100
      MinSize: "3"
      MaxSize: "5"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        SecurityGroups:
          - Ref: LBSecGroup
        Subnets:
          - Fn::ImportValue : !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue : !Sub "${EnvironmentName}-PUB2-SN"

  Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
          DefaultActions: 
           - Type: forward
             TargetGroupArn:
               Ref: WebAppTargetGroup
          LoadBalancerArn: 
            Ref: WebAppLB
          Port: '80'
          Protocol: 'HTTP' 

  ALBListenerRule:
          Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
          Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1 
  


 
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 'UdagramLaunchTemplate'
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install nginx -y
           # apt-get install awscli -y
           # aws s3 sync s3://${S3BucketName} /var/www/html
           # systemctl start nginx
           # systemctl enable nginx
        ImageId: ami-007855ac798b5175e
        InstanceType: t3.micro
        SecurityGroupIds:
          - Ref: WebServerSecGroup
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'

  

  

Outputs:
  URL:
    Description: Udagram
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
    
